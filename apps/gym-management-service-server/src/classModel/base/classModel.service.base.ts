/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ClassModel as PrismaClassModel,
  Attendance as PrismaAttendance,
  Trainer as PrismaTrainer,
} from "@prisma/client";

export class ClassModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClassModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.classModel.count(args);
  }

  async classModels<T extends Prisma.ClassModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassModelFindManyArgs>
  ): Promise<PrismaClassModel[]> {
    return this.prisma.classModel.findMany<Prisma.ClassModelFindManyArgs>(args);
  }
  async classModel<T extends Prisma.ClassModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassModelFindUniqueArgs>
  ): Promise<PrismaClassModel | null> {
    return this.prisma.classModel.findUnique(args);
  }
  async createClassModel<T extends Prisma.ClassModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassModelCreateArgs>
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.create<T>(args);
  }
  async updateClassModel<T extends Prisma.ClassModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassModelUpdateArgs>
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.update<T>(args);
  }
  async deleteClassModel<T extends Prisma.ClassModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClassModelDeleteArgs>
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.delete(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.classModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }

  async getTrainer(parentId: string): Promise<PrismaTrainer | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .trainer();
  }
}
